import { ApolloClient, InMemoryCache, gql } from '@apollo/client'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import styles from '../styles/Home.module.css'


export default function Home({data}) {
  return (
    <div className={styles.container}>
      <Head>
        <title>NextJS Project</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Episodes List
        </h1>
        <p className={styles.description}>
          episodes from{' '}
          <code className={styles.code}>Ricky And Morty</code>
        </p>

        <div className={styles.grid}>
          {data.map((episode)=>{
          return(
          <Link href={"/episode/"+episode.id} key={episode.id}>
              <a className={styles.card}>
              <h2>{episode.name}</h2>
              <p>Episode: {episode.episode}</p>
              <p>Aired on: {episode.air_date}</p>
            </a>
          </Link>
          )
        })}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export async function getStaticProps() {
  const client = new ApolloClient({
    uri: "https://rickandmortyapi.com/graphql",
    cache: new InMemoryCache
  });

  const {data} = await client.query({
    query: gql`
    query {
      episodes{
        results{
          id
          name
          episode
          air_date
          characters{
            name
          }
        }
      }
  }
    `
  });

  return {
    props:{
      data: data.episodes.results
    }
  } 
}